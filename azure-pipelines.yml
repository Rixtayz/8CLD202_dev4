# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: "default"

variables:
- name: RG
  value: 'Guro'
- name: RG_Location
  value: 'eastus'
- name: Vault
  value: 'GuroKeyVault'
- name: AppConfig
  value: 'GuroAppConfiguration'
- name: LogAnalytics
  value: 'LogAnalyticsName'
- name: InfrastructureFolder
  value: 'CloudInfrastructure'
- name: ApplicationInsight
  value: 'ApplicationInsight'
- name: BlobName
  value: 'guroblobstore'
- name: BlobContainer1
  value: 'unvalidated'
- name: BlobContainer2
  value: 'validated'
- name: SBusName
  value: 'GuroSb'
- name: EventHubName
  value: 'GuroEventHub'
- name: CosmosDBName
  value: 'gurocosmo'
- name: ContentName
  value: 'GuroContentSafety'
- name: ContainerRegistryName
  value: 'GuroRegistry'
- name: DockerRegistryServiceConnectionName
  value: 'Docker Registry (Dynamic)'
- name: AzureSubscription
  value: 'Azure subscription 1(970fcef5-9c23-4f7d-a11b-5a96d104f066)'

steps:
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: ARM Deployment
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: $(AzureSubscription)
      action: 'Create Or Update Resource Group'
      resourceGroupName: '$(RG)'
      location: '$(RG_Location)'
      templateLocation: 'Linked artifact'
      csmFile: '$(Build.SourcesDirectory)\$(InfrastructureFolder)\azuredeploy.json'
      csmParametersFile: '$(Build.SourcesDirectory)\$(InfrastructureFolder)\azuredeploy.parameters.json'
      overrideParameters: '-ContentSafetyname $(ContentName) -NoSQLname $(CosmosDBName) -ServiceBusName $(SBusName) -location $(RG_Location) -VaultName $(Vault) -AppConfigName $(AppConfig) -LogAnalyticsName $(LogAnalytics) -ApplicationInsightName $(ApplicationInsight) -storageAccountName $(BlobName) -storageBlobContainerName1 $(BlobContainer1) -storageBlobContainerName2 $(BlobContainer2) -EventHubName $(EventHubName) -ContainerRegistryName $(ContainerRegistryName)'
      deploymentMode: 'Incremental'
      deploymentOutputs: 'Deployment1'
  
  - task: AzureCLI@2
    displayName: 'Create Docker Registry Service Connection (Dynamic)'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az devops service-endpoint create \
          --name $(DockerRegistryServiceConnectionName) \
          --project $(System.TeamProject) \
          --docker-username $(Deployment1.outputs.dockerUsername.value) \
          --docker-password $(Deployment1.outputs.dockerPassword.value) \
          --docker-registry-url $(Deployment1.outputs.dockerRegistryUrl.value) \
          --organization $(System.CollectionUri) \
          --enable-for-all

  - task: AzureCLI@2
    displayName: 'Grant Permissions for Service Connection'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Grant access to Project Collection Build Service account
        az devops service-endpoint update \
          --name $(DockerRegistryServiceConnectionName) \
          --project $(System.TeamProject) \
          --organization $(System.CollectionUri) \
          --enable-for-all

  # - task: Docker@2
  #   displayName: 'Packaging API'
  #   inputs:
  #     containerRegistry: $(DockerRegistryServiceConnectionName)
  #     repository: 'API'
  #     command: 'buildAndPush'
  #     Dockerfile: './API/Dockerfile'
  #     buildContext: '$(Build.SourcesDirectory)'
  #     tags: |
  #       $(Build.BuildId)
  #       latest

  # - task: Docker@2
  #   displayName: 'Packaging MVC'
  #   inputs:
  #     containerRegistry: $(DockerRegistryServiceConnectionName)
  #     repository: 'MVC'
  #     command: 'buildAndPush'
  #     Dockerfile: './MVC/Dockerfile'
  #     buildContext: '$(Build.SourcesDirectory)'
  #     tags: |
  #       $(Build.BuildId)
  #       latest

  # - task: Docker@2
  #   displayName: 'Packaging Worker_Content'
  #   inputs:
  #     containerRegistry: $(DockerRegistryServiceConnectionName)
  #     repository: 'Worker_Content'
  #     command: 'buildAndPush'
  #     Dockerfile: './Worker_Content/Dockerfile'
  #     buildContext: '$(Build.SourcesDirectory)'
  #     tags: |
  #       $(Build.BuildId)
  #       latest

  # - task: Docker@2
  #   displayName: 'Packaging Worker_DB'
  #   inputs:
  #     containerRegistry: $(DockerRegistryServiceConnectionName)
  #     repository: 'Worker_DB'
  #     command: 'buildAndPush'
  #     Dockerfile: './Worker_DB/Dockerfile'
  #     buildContext: '$(Build.SourcesDirectory)'
  #     tags: |
  #       $(Build.BuildId)
  #       latest

  # - task: Docker@2
  #   displayName: 'Packaging Worker_Image'
  #   inputs:
  #     containerRegistry: $(DockerRegistryServiceConnectionName)
  #     repository: 'Worker_Image'
  #     command: 'buildAndPush'
  #     Dockerfile: './Worker_Image/Dockerfile'
  #     buildContext: '$(Build.SourcesDirectory)'
  #     tags: |
  #       $(Build.BuildId)
  #       latest